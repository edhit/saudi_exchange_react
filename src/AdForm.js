// src/components/AdForm.js
import React, { useEffect, useRef, useState } from "react";
import CurrencyExchange from "./CurrencyExchange";
import Notification from "./Notification";

const AdForm = () => {
  const [greeting, setGreeting] = useState("");
  const [transactionType, setTransactionType] = useState("–ü—Ä–æ–¥–∞–º");
  const [sellCurrency, setSellCurrency] = useState("usd");
  const [buyCurrency, setBuyCurrency] = useState("rub");
  const [additionalCurrency, setAdditionalCurrency] = useState("");
  const [amount, setAmount] = useState("");
  const [pricePerUnit, setPricePerUnit] = useState("");
  const [, setExchangeRate] = useState(null);
  const [cities, setCities] = useState([]);
  const [comment, setComment] = useState("");
  const [exchangeMethod, setExchangeMethod] = useState([]);
  const [delivery, setDelivery] = useState("none");
  const [generatedMessage, setGeneratedMessage] = useState("");
  const [showNotification, setShowNotification] = useState(false); // –∫–æ–ø–∏—è –≤–æ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
  const [showTooltip, setShowTooltip] = useState(false); // –ø–æ–¥—Å–∫–∞–∑–∫–∞
  const [showCopyHint, setShowCopyHint] = useState(false);
  const [highlightCopyButton, setHighlightCopyButton] = useState(false);
  const previewRef = useRef(null);
  const commentRef = useRef(null);
  const [paddingBottom, setPaddingBottom] = useState(0);

  useEffect(() => {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      setPaddingBottom(0);
    };
  }, []);

  const handleRateChange = (rate) => {
    setExchangeRate(rate);
  };

  const handleCityCheckboxChange = (city) => {
    setCities((prevCities) => {
      if (prevCities.includes(city)) {
        return prevCities.filter((c) => c !== city);
      } else {
        return [...prevCities, city];
      }
    });
  };

  const handleExchangeMethodChange = (method) => {
    setExchangeMethod((prev) => {
      if (prev.includes(method)) {
        return prev.filter((m) => m !== method);
      } else {
        return [...prev, method];
      }
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç –º–µ—Å—Ç–∞–º–∏
  const swapCurrencies = () => {
    setSellCurrency(buyCurrency);
    setBuyCurrency(sellCurrency);
  };

  const handleGenerateMessage = () => {
    const messageParts = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
    if (greeting) {
      messageParts.push(greeting);
    }

    if (sellCurrency && buyCurrency) {
      const amountPart = amount ? `${amount} ` : "";
      if (transactionType === "–ü—Ä–æ–¥–∞–º") {
        messageParts.push(
          `–ü—Ä–æ–¥–∞–º ${amountPart}${sellCurrency.toUpperCase()} –∑–∞ –≤–∞—à–∏ ${buyCurrency.toUpperCase()}`
        );
      } else if (transactionType === "–ö—É–ø–ª—é") {
        messageParts.push(
          `–ö—É–ø–ª—é ${amountPart}${sellCurrency.toUpperCase()} –∑–∞ –≤–∞—à–∏ ${buyCurrency.toUpperCase()}`
        );
      } else if (transactionType === "–ú–µ–Ω—è—é") {
        let message = `–ú–µ–Ω—è—é ${amountPart}${sellCurrency.toUpperCase()} –Ω–∞ –≤–∞—à–∏ ${buyCurrency.toUpperCase()}`;
        if (additionalCurrency) {
          messageParts.push(`${message},${additionalCurrency.toUpperCase()}`);
        } else {
          messageParts.push(`${message}`);
        }
      }
    }

    if (cities.length > 0) {
      messageParts.push(`üìç ${cities.join(", ")}`);
    }

    if (pricePerUnit) {
      messageParts.push(`üíµ –ö—É—Ä—Å: ${pricePerUnit}`);
    }

    if (exchangeMethod.length > 0) {
      messageParts.push(`üîÑ ${exchangeMethod.join(", ")}`);
    }

    if (delivery === "free") {
      messageParts.push("üöö –î–æ—Å—Ç–∞–≤–∫–∞: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è");
    } else if (delivery !== "none") {
      messageParts.push(`üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${delivery} SAR`);
    }

    if (comment) {
      messageParts.push(comment);
    }

    const formattedMessage = messageParts.join("\n");
    setGeneratedMessage(formattedMessage);

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
    setShowCopyHint(true);
    setShowTooltip(true);
    setHighlightCopyButton(true);

    // –°–∫—Ä—ã—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setShowCopyHint(false);
      setShowTooltip(false);
      setHighlightCopyButton(false);
    }, 3000);

    // –°–∫—Ä–æ–ª–ª –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
      previewRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };

  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(generatedMessage);
    setShowNotification(true);
    setTimeout(() => {
      setShowNotification(false);
    }, 3000); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  };

  const handleFocus = () => {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –ø–æ–ª—è textarea
    const textareaHeight = commentRef.current?.offsetHeight || 0;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã –ø–æ–ª–µ –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–æ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const keyboardHeightEstimate = window.innerHeight * 0.35; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
    setPaddingBottom(keyboardHeightEstimate + textareaHeight);

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ–ª—é
    setTimeout(() => {
      commentRef.current?.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }, 300);
  };

  const handleBlur = () => {
    // –°–±—Ä–æ—Å –æ—Ç—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ñ–æ–∫—É—Å–∞ —Å –ø–æ–ª—è –≤–≤–æ–¥–∞
    setPaddingBottom(0);
  };

  return (
    <div class="container mx-auto p-4">
      <div style={{ paddingBottom: `${paddingBottom}px` }}>
        <div className="p-4 max-w-md mx-auto bg-white rounded-lg">
          <h1 className="text-xl font-bold mb-4 text-center">
            üá∏üá¶ –û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã –≤ –°–∞—É–¥–∏–∏
          </h1>

          {/* –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è */}
          <div className="mb-4">
            <label className="block font-bold mb-2">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</label>
            <label className="flex items-center">
              <input
                type="radio"
                name="greeting"
                value="ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ"
                onChange={(e) => setGreeting(e.target.value)}
                className="mr-2"
              />
              ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ
            </label>
            <label className="flex items-center mt-2">
              <input
                type="radio"
                name="greeting"
                value="ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿá"
                onChange={(e) => setGreeting(e.target.value)}
                className="mr-2"
              />
              ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿá
            </label>
            <label className="flex items-center mt-2">
              <input
                type="radio"
                name="greeting"
                value=""
                onChange={(e) => setGreeting("")}
                className="mr-2"
                defaultChecked
              />
              –ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            </label>
          </div>

          {/* –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ */}
          <div className="flex space-x-2 mb-4">
            {["–ü—Ä–æ–¥–∞–º", "–ö—É–ø–ª—é", "–ú–µ–Ω—è—é"].map((type) => (
              <label key={type}>
                <input
                  type="radio"
                  value={type}
                  checked={transactionType === type}
                  onChange={() => setTransactionType(type)}
                  className="hidden"
                />
                <span
                  className={`px-4 py-2 rounded-lg cursor-pointer ${
                    transactionType === type
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                  }`}
                >
                  {type}
                </span>
              </label>
            ))}
          </div>

          <div className="flex items-center mb-4">
            <div className="flex-1">
              <label className="block text-sm font-medium mb-1">
                –í–∞–ª—é—Ç–∞ {transactionType === "–ö—É–ø–ª—é" ? "–ø–æ–∫—É–ø–∫–∏" : "–ø—Ä–æ–¥–∞–∂–∏"}
              </label>
              <select
                value={sellCurrency}
                onChange={(e) => setSellCurrency(e.target.value)}
                className="p-2 border rounded w-full"
              >
                <option value="usd">USD</option>
                <option value="usdt">USDT</option>
                <option value="rub">RUB</option>
                <option value="kzt">KZT</option>
                <option value="uzs">UZS</option>
                <option value="sar">SAR</option>
              </select>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç */}
            <button
              onClick={swapCurrencies}
              className="mx-2 p-2 bg-gray-200 hover:bg-gray-300 rounded-full text-sm flex items-center justify-center"
              aria-label="–ü–æ–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—ã –º–µ—Å—Ç–∞–º–∏"
            >
              üîÅ
            </button>

            <div className="flex-1">
              <label className="block text-sm font-medium mb-1">
                –í–∞–ª—é—Ç–∞ {transactionType === "–ö—É–ø–ª—é" ? "–ø—Ä–æ–¥–∞–∂–∏" : "–ø–æ–∫—É–ø–∫–∏"}
              </label>
              <select
                value={buyCurrency}
                onChange={(e) => setBuyCurrency(e.target.value)}
                className="p-2 border rounded w-full"
              >
                <option value="usd">USD</option>
                <option value="usdt">USDT</option>
                <option value="rub">RUB</option>
                <option value="kzt">KZT</option>
                <option value="uzs">UZS</option>
                <option value="sar">SAR</option>
              </select>
            </div>
          </div>

          {transactionType === "–ú–µ–Ω—è—é" && (
            <div className="mb-4">
              <label className="block mb-2">–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –≤–∞–ª—é—Ç—É</label>
              <select
                value={additionalCurrency}
                onChange={(e) => setAdditionalCurrency(e.target.value)}
                className="w-full p-2 border rounded"
              >
                <option value=""></option>
                <option value="usd">USD</option>
                <option value="usdt">USDT</option>
                <option value="rub">RUB</option>
                <option value="kzt">KZT</option>
                <option value="uzs">UZS</option>
                <option value="sar">SAR</option>
              </select>
            </div>
          )}

          <label className="block mb-2">
            –°—É–º–º–∞ {transactionType === "–ö—É–ø–ª—é" ? "–ø–æ–∫—É–ø–∫–∏" : "–ø—Ä–æ–¥–∞–∂–∏"}:
          </label>
          <input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className="block w-full mb-4 p-2 border rounded"
          />

          <label className="block mb-2">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (–∫—É—Ä—Å –≤–∞–ª—é—Ç):</label>
          <CurrencyExchange
            sellCurrency={sellCurrency}
            buyCurrency={buyCurrency}
            onRateChange={handleRateChange}
          />
          <input
            type="number"
            value={pricePerUnit}
            onChange={(e) => setPricePerUnit(e.target.value)}
            // placeholder={exchangeRate?.toFixed(2) || "–ó–∞–≥—Ä—É–∑–∫–∞..."}
            className="block w-full mb-4 p-2 border rounded"
          />

          <label className="block mb-2">–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞:</label>
          <div className="mb-4 space-y-2">
            {["–ú–µ–¥–∏–Ω–∞", "–ú–µ–∫–∫–∞", "–î–∂–∏–¥–¥–∞", "–≠—Ä-–†–∏—è–¥"].map((city) => (
              <label key={city} className="flex items-center">
                <input
                  type="checkbox"
                  value={city}
                  onChange={() => handleCityCheckboxChange(city)}
                  className="mr-2"
                />
                {city}
              </label>
            ))}
          </div>

          <label className="block mb-2">–°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞:</label>
          <div className="flex space-x-4 mb-4">
            <label>
              <input
                type="checkbox"
                onChange={() => handleExchangeMethodChange("–ü–µ—Ä–µ–≤–æ–¥")}
              />{" "}
              –ü–µ—Ä–µ–≤–æ–¥
            </label>
            <label>
              <input
                type="checkbox"
                onChange={() => handleExchangeMethodChange("–ù–∞–ª–∏—á–∫–∞")}
              />{" "}
              –ù–∞–ª–∏—á–∫–∞
            </label>
          </div>

          <label className="block mt-2">–î–æ—Å—Ç–∞–≤–∫–∞:</label>
          <div className="flex flex-col mt-1">
            <label>
              <input
                type="radio"
                name="delivery"
                value="free"
                checked={delivery === "free"}
                onChange={() => setDelivery("free")}
                className="mr-2"
              />
              –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è
            </label>
            <label className="mt-2">
              <input
                type="radio"
                name="delivery"
                value="none"
                checked={delivery === "none"}
                onChange={() => setDelivery("none")}
                className="mr-2"
              />
              –ë–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏
            </label>
            <label className="mt-2 flex items-start">
              <input
                type="radio"
                name="delivery"
                value="custom"
                checked={delivery !== "free" && delivery !== "none"}
                onChange={() => setDelivery("")}
                className="mr-2"
              />
              <span className="flex flex-col">
                <span>–£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É:</span>
                {delivery !== "free" && delivery !== "none" && (
                  <input
                    type="number"
                    placeholder="–°—É–º–º–∞"
                    value={
                      delivery !== "free" && delivery !== "none" ? delivery : ""
                    }
                    onChange={(e) => setDelivery(e.target.value)}
                    className="mt-1 border p-1 rounded w-full"
                  />
                )}
                {delivery !== "free" && delivery !== "none" && (
                  <span className="mt-1 text-sm text-gray-500">SAR</span>
                )}
              </span>
            </label>
          </div>

          <label className="block mb-2">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
          <textarea
            value={comment}
            ref={commentRef}
            onFocus={handleFocus}
            onBlur={handleBlur}
            onChange={(e) => setComment(e.target.value)}
            className="block w-full mb-4 p-2 border rounded"
            placeholder="–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
          ></textarea>

          <button
            onClick={handleGenerateMessage}
            className="w-full mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 relative"
          >
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            {showTooltip && (
              <div className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-sm px-3 py-1 rounded shadow-lg">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—É —Ç–µ–ª–µ–≥—Ä–∞–º–º
              </div>
            )}
          </button>

          {/* –§—É–Ω–∫—Ü–∏—è –≤–≤—ã–≤–æ–¥–∞ */}
          {generatedMessage && (
            <div className="mt-4" ref={previewRef}>
              <h3 className="font-bold mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</h3>
              <div className="p-3 bg-gray-100 rounded border">
                <pre className="whitespace-pre-wrap">{generatedMessage}</pre>
              </div>
              <div className="relative mt-4">
                {showCopyHint && (
                  <div className="absolute text-4xl left-1/2 transform -translate-x-1/2 -top-7 text-sm text-gray-600 animate-bounce-down">
                    üëá
                  </div>
                )}
                <button
                  onClick={handleCopyToClipboard}
                  className={`w-full mt-2 px-4 py-2 text-white rounded ${
                    highlightCopyButton ? "bg-green-400" : "bg-green-500"
                  } hover:bg-green-600`}
                >
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                </button>
              </div>
            </div>
          )}

          {showNotification && (
            <Notification
              message="–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
              duration={3000}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default AdForm;
