// src/components/AdForm.js
import React, { useEffect, useRef, useState } from "react";
import CurrencyExchange from "./CurrencyExchange";
import Notification from "./Notification";

const AdForm = () => {
  const [greeting, setGreeting] = useState("");
  const [transactionType, setTransactionType] = useState("–ü—Ä–æ–¥–∞–º");
  const [sellCurrency, setSellCurrency] = useState("sar");
  const [buyCurrency, setBuyCurrency] = useState("rub");
  const [amount, setAmount] = useState("");
  const [rateOption, setRateOption] = useState("noRate");
  const [pricePerUnit, setPricePerUnit] = useState("");
  const [, setExchangeRate] = useState(null);
  const [cities, setCities] = useState([]);
  const [comment, setComment] = useState("");
  const [exchangeMethod, setExchangeMethod] = useState([]);
  const [delivery, setDelivery] = useState("none");
  const [checkboxOptions, setCheckboxOptions] = useState([]); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤

  const [isUrgent, setIsUrgent] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–†–û–ß–ù–û"
  const [generatedMessage, setGeneratedMessage] = useState("");
  const [showNotification, setShowNotification] = useState(false); // –∫–æ–ø–∏—è –≤–æ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
  const [showTooltip, setShowTooltip] = useState(false); // –ø–æ–¥—Å–∫–∞–∑–∫–∞
  const [showCopyHint, setShowCopyHint] = useState(false);
  const [highlightCopyButton, setHighlightCopyButton] = useState(false);
  const previewRef = useRef(null);
  const commentRef = useRef(null);
  const [paddingBottom, setPaddingBottom] = useState(0);

  useEffect(() => {
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      setPaddingBottom(0);
    };
  }, []);

  const handleRateChange = (rate) => {
    setExchangeRate(rate);
  };

  const handleCityCheckboxChange = (city) => {
    setCities((prevCities) => {
      if (prevCities.includes(city)) {
        return prevCities.filter((c) => c !== city);
      } else {
        return [...prevCities, city];
      }
    });
  };

  const handleExchangeMethodChange = (method) => {
    setExchangeMethod((prev) => {
      if (prev.includes(method)) {
        return prev.filter((m) => m !== method);
      } else {
        return [...prev, method];
      }
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç –º–µ—Å—Ç–∞–º–∏
  const swapCurrencies = () => {
    setSellCurrency(buyCurrency);
    setBuyCurrency(sellCurrency);
  };

  const handleGenerateMessage = () => {
    const messageParts = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ
    if (greeting) {
      messageParts.push(greeting);
    }

    if (sellCurrency && buyCurrency) {
      const amountPart = amount ? `${amount} ` : "";
      const currencies = Object.keys(checkboxOptions)
      let text = buyCurrency.toUpperCase()
      for (let index = 0; index < currencies.length; index++) {
        if (currencies[index] !== buyCurrency)
        text = `${text}, ${currencies[index].toUpperCase()}`
      }

      if (transactionType === "–ü—Ä–æ–¥–∞–º") {
        messageParts.push(
          `–ü—Ä–æ–¥–∞–º ${amountPart}${sellCurrency.toUpperCase()} –∑–∞ ${text}`
        );
      } else if (transactionType === "–ö—É–ø–ª—é") {
        messageParts.push(
          `–ö—É–ø–ª—é ${amountPart}${sellCurrency.toUpperCase()} –∑–∞ ${text}`
        );
      } else if (transactionType === "–ú–µ–Ω—è—é") {
        messageParts.push(
          `–ú–µ–Ω—è—é ${amountPart}${sellCurrency.toUpperCase()} –Ω–∞ ${text}`
        );
      }
    }

    if (cities.length > 0) {
      messageParts.push(`üìç ${cities.join(", ")}`);
    }

    if (rateOption === "customRate") {
      if (pricePerUnit) {
        messageParts.push(`üíµ –ö—É—Ä—Å: ${pricePerUnit}`);
      }
    } else if (rateOption === "googleRate") {
      messageParts.push(`üíµ –ö—É—Ä—Å Google`);
    } else if (rateOption === "messageMe") {
      messageParts.push(`üíµ –ó–∞ –∫—É—Ä—Å–æ–º –≤ –õ–°`);
    }

    if (exchangeMethod.length > 0) {
      messageParts.push(`üîÑ ${exchangeMethod.join(", ")}`);
    }

    if (delivery === "free") {
      messageParts.push("üöö –î–æ—Å—Ç–∞–≤–∫–∞: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è");
    } else if (delivery !== "none") {
      messageParts.push(`üöö –î–æ—Å—Ç–∞–≤–∫–∞: ${delivery} SAR`);
    }

    if (comment) {
      messageParts.push(comment);
    }

    if (isUrgent) {
      messageParts.push('')
      messageParts.push('üö® –°—Ä–æ—á–Ω–æ!!!')
    }

    const formattedMessage = messageParts.join("\n");
    setGeneratedMessage(formattedMessage);

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
    setShowCopyHint(true);
    setShowTooltip(true);
    setHighlightCopyButton(true);

    // –°–∫—Ä—ã—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –∏ –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setShowCopyHint(false);
      setShowTooltip(false);
      setHighlightCopyButton(false);
    }, 3000);

    // –°–∫—Ä–æ–ª–ª –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setTimeout(() => {
      previewRef.current?.scrollIntoView({ behavior: "smooth" });
    }, 100);
  };

  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(generatedMessage);
    setShowNotification(true);
    setTimeout(() => {
      setShowNotification(false);
    }, 3000); // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å—á–µ–∑–∞–µ—Ç —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  };

  const handleFocus = () => {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –ø–æ–ª—è textarea
    const textareaHeight = commentRef.current?.offsetHeight || 0;

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—Ç—É–ø–∞, —á—Ç–æ–±—ã –ø–æ–ª–µ –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–æ—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    const keyboardHeightEstimate = window.innerHeight * 0.35; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å)
    setPaddingBottom(keyboardHeightEstimate + textareaHeight);

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ–ª—é
    setTimeout(() => {
      commentRef.current?.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }, 300);
  };

  const handleBlur = () => {
    // –°–±—Ä–æ—Å –æ—Ç—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Ñ–æ–∫—É—Å–∞ —Å –ø–æ–ª—è –≤–≤–æ–¥–∞
    setPaddingBottom(0);
  };

  const toggleCheckbox = (option) => {
    setCheckboxOptions((prevState) => ({
      ...prevState,
      [option]: !prevState[option],
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è "–°–†–û–ß–ù–û –û–ë–™–Ø–í–õ–ï–ù–ò–ï"
  const handleUrgentToggle = () => {
    setIsUrgent((prev) => !prev);
  };

  return (
    <div class="container mx-auto p-4">
      <div style={{ paddingBottom: `${paddingBottom}px` }}>
        <div className="p-4 max-w-md mx-auto bg-white rounded-lg">
          <h1 className="text-xl font-bold mb-4 text-center">
            üá∏üá¶ –û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã –≤ –°–∞—É–¥–∏–∏
          </h1>

          {/* –ß–µ–∫–±–æ–∫—Å "–°–†–û–ß–ù–û –û–ë–™–Ø–í–õ–ï–ù–ò–ï" */}
          <div className="mb-4">
            <button
              type="button"
              onClick={handleUrgentToggle}
              className={`px-4 py-2 rounded-lg border-2 w-full ${
                isUrgent
                  ? "bg-red-500 text-white border-red-700"
                  : "bg-gray-200 text-gray-700 hover:bg-gray-300 border-gray-300"
              }`}
            >
              üö® –°–†–û–ß–ù–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï
            </button>
          </div>

          {/* –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è */}
          <div className="mb-4">
            <label className="block mb-2 font-semibold">–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ</label>
            <div className="flex flex-wrap gap-2">
              {[
                { label: "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ", value: "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ" },
                { label: "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿá", value: "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸá Ÿàÿ®ÿ±ŸÉÿßÿ™Ÿá" },
                { label: "–ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", value: "–ë–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è" },
              ].map((option) => (
                <button
                  key={option.value}
                  onClick={() => setGreeting(option.value)}
                  className={`px-4 py-2 rounded-lg ${
                    greeting === option.value
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                  }`}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          <div class="relative flex items-center mb-6">
            <div class="flex-grow border-t border-gray-300"></div>
          </div>

          {/* –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ */}
          <div className="flex space-x-2 mb-4">
            {["–ü—Ä–æ–¥–∞–º", "–ö—É–ø–ª—é", "–ú–µ–Ω—è—é"].map((type) => (
              <label key={type}>
                <input
                  type="radio"
                  value={type}
                  checked={transactionType === type}
                  onChange={() => setTransactionType(type)}
                  className="hidden"
                />
                <span
                  className={`px-6 py-3 text-xl rounded-lg cursor-pointer ${
                    transactionType === type
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                  }`}
                >
                  {type}
                </span>
              </label>
            ))}
          </div>

          <div className="flex items-center mb-4">
            <div className="flex-1">
              <label className="block text-sm font-medium mb-1">
                –í–∞–ª—é—Ç–∞ {transactionType === "–ö—É–ø–ª—é" ? "–ø–æ–∫—É–ø–∫–∏" : "–ø—Ä–æ–¥–∞–∂–∏"}
              </label>
              <select
                value={sellCurrency}
                onChange={(e) => setSellCurrency(e.target.value)}
                className="p-2 border rounded w-full"
              >
                <option value="usd">USD</option>
                <option value="usdt">USDT</option>
                <option value="eur">EUR</option>
                <option value="rub">RUB</option>
                <option value="kzt">KZT</option>
                <option value="uzs">UZS</option>
                <option value="sar">SAR</option>
              </select>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç */}
            <button
              onClick={swapCurrencies}
              className="mx-2 p-2 bg-gray-200 hover:bg-gray-300 rounded-full text-sm flex items-center justify-center"
              aria-label="–ü–æ–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—ã –º–µ—Å—Ç–∞–º–∏"
            >
              üîÅ
            </button>

            <div className="flex-1">
              <label className="block text-sm font-medium mb-1">
                –í–∞–ª—é—Ç–∞ {transactionType === "–ö—É–ø–ª—é" ? "–ø—Ä–æ–¥–∞–∂–∏" : "–ø–æ–∫—É–ø–∫–∏"}
              </label>
              <select
                value={buyCurrency}
                onChange={(e) => setBuyCurrency(e.target.value)}
                className="p-2 border rounded w-full"
              >
                <option value="usd">USD</option>
                <option value="usdt">USDT</option>
                <option value="eur">EUR</option>
                <option value="rub">RUB</option>
                <option value="kzt">KZT</option>
                <option value="uzs">UZS</option>
                <option value="sar">SAR</option>
              </select>
            </div>
          </div>

          <div class="relative flex items-center mb-2">
            <div class="flex-grow border-t border-gray-300"></div>
            <span class="mx-4 text-gray-500">
              –∏–ª–∏ (–≤–∞–ª—é—Ç–∞ {transactionType === "–ö—É–ø–ª—é" ? "–ø—Ä–æ–¥–∞–∂–∏" : "–ø–æ–∫—É–ø–∫–∏"})
            </span>
            <div class="flex-grow border-t border-gray-300"></div>
          </div>

          <div className="flex flex-wrap gap-2">
            {[
              { label: "USD", value: "usd" },
              { label: "USDT", value: "usdt" },
              { label: "EUR", value: "eur" },
              { label: "RUB", value: "rub" },
              { label: "KZT", value: "kzt" },
              { label: "UZS", value: "usz" },
              { label: "SAR", value: "sar" },
            ].map((option) => (
              <button
                key={option.value}
                onClick={() => toggleCheckbox(option.value)}
                className={`px-4 py-2 rounded-lg mb-2 ${
                  checkboxOptions[option.value]
                    ? "bg-blue-500 text-white"
                    : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                }`}
              >
                {option.label}
              </button>
            ))}
          </div>

          <label className="block mb-2 font-semibold">
            –°—É–º–º–∞ {transactionType === "–ö—É–ø–ª—é" ? "–ø–æ–∫—É–ø–∫–∏" : "–ø—Ä–æ–¥–∞–∂–∏"}
          </label>
          <input
            type="number"
            value={amount}
            onChange={(e) => setAmount(e.target.value)}
            className="block w-full mb-4 p-2 border rounded"
          />

          <div className="my-4">
            <label className="block mb-2 font-semibold">–ö—É—Ä—Å</label>
            <div className="flex flex-wrap gap-2">
              {[
                { label: "–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∫—É—Ä—Å", value: "noRate" },
                { label: "–£–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å", value: "customRate" },
                { label: "–ö—É—Ä—Å Google", value: "googleRate" },
                { label: "–ó–∞ –∫—É—Ä—Å–æ–º –≤ –õ–°", value: "messageMe" },
              ].map((option) => (
                <button
                  key={option.value}
                  onClick={() => setRateOption(option.value)}
                  className={`px-4 py-2 rounded-lg ${
                    rateOption === option.value
                      ? "bg-blue-500 text-white"
                      : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                  }`}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          {/* –ü–æ–ª–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫—É—Ä—Å–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "—É–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å") */}
          {rateOption === "customRate" && (
            <div className="my-4 p-4 border-2 border-blue-500 bg-blue-100 rounded-lg">
              <label className="block text-blue-700 font-bold mb-2">
                –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (–∫—É—Ä—Å –≤–∞–ª—é—Ç)
              </label>
              <CurrencyExchange
                sellCurrency={sellCurrency}
                buyCurrency={buyCurrency}
                onRateChange={handleRateChange}
              />
              <input
                type="number"
                value={pricePerUnit}
                onChange={(e) => setPricePerUnit(e.target.value)}
                // placeholder={exchangeRate?.toFixed(2) || "–ó–∞–≥—Ä—É–∑–∫–∞..."}
                className="block w-full mb-4 p-2 border rounded"
              />
            </div>
          )}

          <label className="block mb-2 font-semibold">–ì–æ—Ä–æ–¥</label>
          <div className="flex flex-wrap gap-2 mb-4">
            {["–ú–µ–¥–∏–Ω–∞", "–ú–µ–∫–∫–∞", "–î–∂–∏–¥–¥–∞", "–≠—Ä-–†–∏—è–¥"].map((city) => (
              <button
                key={city}
                type="button"
                onClick={() => handleCityCheckboxChange(city)}
                className={`px-4 py-2 rounded-lg ${
                  cities.includes(city)
                    ? "bg-blue-500 text-white"
                    : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                }`}
              >
                {city}
              </button>
            ))}
          </div>

          <label className="block mb-2 font-semibold">–°–ø–æ—Å–æ–± –æ–±–º–µ–Ω–∞</label>
          <div className="flex gap-2 mb-4">
            {["–ü–µ—Ä–µ–≤–æ–¥", "–ù–∞–ª–∏—á–∫–∞"].map((method) => (
              <button
                key={method}
                type="button"
                onClick={() => handleExchangeMethodChange(method)}
                className={`px-4 py-2 rounded-lg ${
                  exchangeMethod.includes(method)
                    ? "bg-blue-500 text-white"
                    : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                }`}
              >
                {method}
              </button>
            ))}
          </div>

          <label className="block mt-2 font-semibold">–î–æ—Å—Ç–∞–≤–∫–∞</label>
          <div className="flex flex-wrap gap-2 mt-1">
            <button
              type="button"
              onClick={() => setDelivery("free")}
              className={`px-4 py-2 rounded-lg ${
                delivery === "free"
                  ? "bg-blue-500 text-white"
                  : "bg-gray-200 text-gray-700 hover:bg-gray-300"
              }`}
            >
              –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è
            </button>
            <button
              type="button"
              onClick={() => setDelivery("none")}
              className={`px-4 py-2 rounded-lg ${
                delivery === "none"
                  ? "bg-blue-500 text-white"
                  : "bg-gray-200 text-gray-700 hover:bg-gray-300"
              }`}
            >
              –ë–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏
            </button>
            <button
              type="button"
              onClick={() => setDelivery("")}
              className={`px-4 py-2 rounded-lg ${
                delivery !== "free" && delivery !== "none"
                  ? "bg-blue-500 text-white"
                  : "bg-gray-200 text-gray-700 hover:bg-gray-300"
              }`}
            >
              –£–∫–∞–∑–∞—Ç—å —Å—É–º–º—É
            </button>
            {delivery !== "free" && delivery !== "none" && (
              <input
                type="number"
                placeholder="–°—É–º–º–∞"
                value={delivery}
                onChange={(e) => setDelivery(e.target.value)}
                className="mt-2 p-2 border rounded w-full"
              />
            )}
          </div>

          <label className="block mt-2 font-semibold">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</label>
          <textarea
            value={comment}
            ref={commentRef}
            onFocus={handleFocus}
            onBlur={handleBlur}
            onChange={(e) => setComment(e.target.value)}
            className="block w-full mb-4 p-2 border rounded"
            placeholder="–ü–æ–¥—ä–µ–¥—É –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –º–µ—Å—Ç–æ"
          ></textarea>

          <button
            onClick={handleGenerateMessage}
            className="w-full mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 relative"
          >
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            {showTooltip && (
              <div className="absolute bottom-full mb-2 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-base px-3 py-1 rounded shadow-lg">
                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—É —Ç–µ–ª–µ–≥—Ä–∞–º–º
              </div>
            )}
          </button>

          {/* –§—É–Ω–∫—Ü–∏—è –≤–≤—ã–≤–æ–¥–∞ */}
          {generatedMessage && (
            <div className="mt-4" ref={previewRef}>
              <h3 className="font-bold mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è</h3>
              <div className="p-3 bg-gray-100 rounded border">
                <pre className="whitespace-pre-wrap">{generatedMessage}</pre>
              </div>
              <div className="relative mt-4">
                {showCopyHint && (
                  <div className="absolute text-4xl left-1/2 transform -translate-x-1/2 -top-7 text-sm text-gray-600 animate-bounce-down">
                    üëá
                  </div>
                )}
                <button
                  onClick={handleCopyToClipboard}
                  className={`w-full mt-2 px-4 py-2 text-white rounded ${
                    highlightCopyButton ? "bg-green-400" : "bg-green-500"
                  } hover:bg-green-600`}
                >
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                </button>
              </div>
            </div>
          )}

          {showNotification && (
            <Notification
              message="–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
              duration={3000}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default AdForm;
